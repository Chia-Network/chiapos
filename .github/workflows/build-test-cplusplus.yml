name: Build and Test C++

on: [push, pull_request]

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}--${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/long_lived/')) && github.sha || '' }}
  cancel-in-progress: true

jobs:
  valgrind:
    name: valgrind ubuntu
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Env
        uses: Chia-Network/actions/setjobenv@main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: cmake, RunTests, and valgrind on ubuntu-20.04
        run: |
          sudo apt update
          sudo apt-get install valgrind libnuma-dev -y
          mkdir build
          cd build
          cmake ../
          cmake --build . -- -j "$(nproc)"
          ctest -j "$(nproc)" --output-on-failure
          valgrind --leak-check=full --show-leak-kinds=all --errors-for-leak-kinds=all ctest -j "$(nproc)" --output-on-failure

  asan:
    name: ASAN ubuntu
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Env
        uses: Chia-Network/actions/setjobenv@main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: cmake, RunTests with address- and undefined sanitizer on Ubuntu
        run: |
          sudo apt-get install libnuma-dev -y
          sudo fallocate -l 16G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          swapon -s
          mkdir build-asan
          cd build-asan
          cmake -DCMAKE_BUILD_TYPE=ASAN ../
          cmake --build . -- -j "$(nproc)"
          swapon -s
          ./RunTests

  tsan:
    name: TSAN ubuntu
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Env
        uses: Chia-Network/actions/setjobenv@main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: cmake, RunTests with thread sanitizer on Ubuntu
        run: |
          sudo apt-get install libnuma-dev -y
          mkdir build-tsan
          cd build-tsan
          cmake -DCMAKE_BUILD_TYPE=TSAN ../
          cmake --build . -- -j "$(nproc)"
          TSAN_OPTIONS="memory_limit_mb=6000" ./RunTests

  windows:
    name: Windows Latest
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set Env
        uses: Chia-Network/actions/setjobenv@main
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: cmake, RunTests with Windows
        run: |
          mkdir build-win
          cd build-win
          cmake ..
          cmake --build . --config Release -j "$(nproc)"
          ctest -C Release -j "$(nproc)"

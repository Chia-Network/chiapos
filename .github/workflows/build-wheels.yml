name: Build Wheels

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-20.04, windows-latest]

    steps:
    - name: Cancel previous runs on the same branch
      if: ${{ github.ref != 'refs/heads/main' }}
      uses: styfle/cancel-workflow-action@0.7.0
      with:
        access_token: ${{ github.token }}

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v2
      name: Install Python
      with:
        python-version: '3.8'

    - name: Lint source with flake8
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        flake8 tests setup.py

    - name: Lint source with mypy
      run: |
        pip install mypy
        mypy --config-file mypi.ini setup.py tests

    - name: Build source distribution on MacOS
      if: startsWith(matrix.os, 'macos')
      run: |
        pip install build
        python -m build --sdist --outdir dist .

    - name: Build ${{ matrix.os }} wheels and test
      uses: joerick/cibuildwheel@v1.10.0
      with:
        output-dir: dist
      env:
        # build python 3.7 and 3.8
        CIBW_BUILD: 'cp37-* cp38-* cp39-*'
        CIBW_SKIP: '*-manylinux_i686 *-win32'
        # we need boost
        # CIBW_ARCHS_MACOS: x86_64 arm64 universal2
        CIBW_ARCHS_MACOS: x86_64
        CIBW_TEST_SKIP: '*_arm64 *_universal2:arm64'
        CIBW_BUILD_VERBOSITY_LINUX: 0
        CIBW_BUILD_VERBOSITY_MACOS: 0
        CIBW_BUILD_VERBOSITY_WINDOWS: 0
        CIBW_MANYLINUX_X86_64_IMAGE: manylinux2010
        CIBW_ENVIRONMENT_LINUX: "PATH=/project/cmake-3.17.3-Linux-`uname -m`/bin:$PATH"
        CIBW_BEFORE_ALL_LINUX: >
          curl -fsSL https://github.com/Kitware/CMake/releases/download/v3.17.3/cmake-3.17.3-Linux-`uname -m`.sh > cmake.sh
          && yes | sh cmake.sh | cat
          && rm -f /usr/bin/cmake
          && which cmake
          && cmake --version
        CIBW_BEFORE_BUILD_LINUX: >
          python -m pip install --upgrade pip
        CIBW_BEFORE_BUILD_MACOS: >
          python -m pip install --upgrade pip
        CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.14
        # CIBW_ENVIRONMENT_WINDOWS: SETUPTOOLS_USE_DISTUTILS=stdlib
        CIBW_TEST_REQUIRES: pytest
        CIBW_TEST_COMMAND: py.test -v {project}/tests -s

#    - name: Set up QEMU on ubuntu x86_64
#      if: startsWith(matrix.os, 'ubuntu')
#      id: qemu
#      uses: docker/setup-qemu-action@v1
#      with:
#        platforms: arm64
# QEMY is about 9x slower than ARM64 native builds sadly...
#    - name: Build wheels and test aarch64
#      if: startsWith(matrix.os, 'ubuntu')
#      uses: joerick/cibuildwheel@v1.9.0
#      with:
#        output-dir: dist
#      env:
#        CIBW_BUILD: 'cp37-* cp38-* cp39-*'
#        CIBW_ARCHS_LINUX: aarch64
#        CIBW_MANYLINUX_AARCH64_IMAGE: manylinux2014
#        CIBW_BUILD_VERBOSITY_LINUX: 0
#        # we need boost
#        CIBW_BEFORE_ALL_LINUX: >
#          yum -y install epel-release
#          && yum -y install cmake3
#          && rm -rf /usr/local/bin/cmake
#          && ln -s /usr/bin/cmake3 /usr/local/bin/cmake
#          && cmake --version
#          && uname -a
#        CIBW_BEFORE_BUILD_LINUX: >
#          python -m pip install --upgrade pip
#        CIBW_TEST_REQUIRES: pytest
#        CIBW_TEST_COMMAND: py.test -v {project}/tests -s

    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: ./dist

    - name: Test for secrets access
      id: check_secrets
      shell: bash
      run: |
        unset HAS_SECRET
        if [ -n "$SECRET" ]; then HAS_SECRET='true' ; fi
        echo ::set-output name=HAS_SECRET::${HAS_SECRET}
      env:
        SECRET: "${{ secrets.test_pypi_password }}"

    - name: Install twine
      run: pip install twine

    - name: Publish distribution to PyPI
      if: startsWith(github.event.ref, 'refs/tags') && steps.check_secrets.outputs.HAS_SECRET
      env:
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: twine upload --non-interactive --skip-existing --verbose 'dist/*'

    - name: Publish distribution to Test PyPI
      if: steps.check_secrets.outputs.HAS_SECRET
      env:
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.test_pypi_password }}
      run: twine upload --non-interactive --skip-existing --verbose 'dist/*'
